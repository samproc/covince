{"version":3,"sources":["components/Spinner.jsx","utils/loadTiles.js","components/Chloropleth.jsx","components/LineChart2.jsx","components/LocalIncidence.jsx","utils/loadData.js","components/Covid19.jsx","components/NavBar.jsx","components/ContainerWithTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","style","display","justifyContent","alignItems","height","className","role","colormap","require","MapUpdater","date","indexed_by_date","dataframe","scale","map","map_loaded","useMap","window","Chloropleth","state","whenReady","setState","console","log","nextProps","nextState","this","props","by_loc","getSeries","i","_layers","layer","setStyle","feature","fillColor","item","getRowByIndex","properties","lad19cd","tiles","handleOnClick","min_val","max_val","lineage","dmin","dmax","colors","nshades","format","alpha","reverse","number","max_log","Math","sqrt","min_log","num_log","round","portion_of_scale_to_use","getColorScale","onEachLad","lad","a","name","lad19nm","code","bindPopup","on","click","e","MapContainer","zoom","center","GeoJSON","weight","color","fillOpacity","data","onEachFeature","eventHandlers","add","items","push","backgroundColor","ceil","createColorBar","React","Component","LineChart2","x","y","upper","lower","upper1","y1","lower1","key","labels","datasets","label","fill","lineTension","borderColor","borderWidth","pointRadius","type","tension","options","animation","duration","title","text","fontSize","maintainAspectRatio","annotation","annotations","drawTime","id","mode","scaleID","value","legend","position","plugins","ChartAnnotation","memoized_get_lad_data","memoize","where","location","parameter","toArray","LocalIncidence","lad_data","df3","df4","moment","mean","dataForge","LALookupTable","lookup_table","features","forEach","getLALookupTable","memoized_get_min_max","value_of_interest","dataframe_selected_parameter","series","undefined","max","groups","groupBy","lookup","group","first","setIndex","distinct","DataFrame","parseFloats","Covid19","df","useState","setParameter","parameter_of_interest","setLineage","unique_dates","unique_lineages","df2","is_playing","setIsPlaying","setTiles","setLad","setDate","PlayButton","onClick","useEffect","length","lineage_options","parameter_options","Fragment","onChange","target","clearInterval","bumpTimeout","setInterval","bump_date","min","set_to","indexOf","NavBar","collapsed","handleToggle","classTwo","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ContainerWithTimer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3bbe9eb7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"spinner-border text-secondary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { features } from \"../assets/Local_Authority_Districts__December_2019__Boundaries_UK_BUC.json\" // Can change to BUC to reduce bundle size\n//import { features } from \"../assets/hex.json\" // Can change to BUC to reduce bundle size\n\n\nlet colormap = require('colormap')\n\nfunction getColorScale(dmin, dmax) {\n    //dmin=0\n    // dmax = 200\n\n    console.log(\"GCS\")\n\n    let nshades = 4000;\n\n    let colors = colormap({\n        colormap: 'magma',\n        nshades: nshades,\n        format: 'hex',\n        alpha: 1\n    }).reverse()\n\n    let scale = function (number) {\n\n        if (number > dmax) { number = dmax - 1 }\n\n        const max_log = Math.sqrt(dmax)\n        const min_log = Math.sqrt(dmin)\n        const num_log = Math.sqrt(number)\n\n\n\n\n\n        //console.log(\"scale\",)\n        let portion_of_scale_to_use = 0.9; // don't go to deep black\n        return (colors[Math.round(portion_of_scale_to_use * nshades * (num_log - min_log) / (max_log - min_log))])\n\n    }\n    return scale\n}\n\n\n\nfunction loadTiles() {\n    return features\n}\n\n\nfunction getLALookupTable() {\n    let lookup_table = {};\n\n    features.forEach((item) => {\n\n        lookup_table[item.properties.lad19cd] = item.properties.lad19nm\n    })\n    return (lookup_table)\n}\n\n\nexport { loadTiles, getColorScale, getLALookupTable }\n","import React from \"react\";\nimport { MapContainer, GeoJSON, useMap } from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Chloropleth.css\";\nimport { getColorScale } from \"../utils/loadTiles\";\n\n\n\n\nconst MapUpdater = ({ date, indexed_by_date, dataframe, scale, map_loaded }) => {\n\n\n  const map = useMap()\n\n  window.map = map\n  window.scale = scale\n\n  return (false)\n}\n\n\n\nclass Chloropleth extends React.Component {\n\n  state = {\n    map_loaded: false\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n\n\n\n    const { dataframe, date } = nextProps\n    if (nextProps.dataframe!== this.props.dataframe){\n      return true;\n    }\n    \n    const by_loc = dataframe[date].getSeries('mean')\n    window.by_loc = by_loc\n    console.log(\"updating\")\n    const map = window.map\n    const scale = window.scale\n    for (var i in map._layers) {\n\n      const layer = map._layers[i]\n      if (layer.setStyle && layer.feature) {\n        let fillColor = null\n\n        const item = by_loc.getRowByIndex(layer.feature.properties.lad19cd);\n        //console.log(layer.feature.properties.lad19cd,item)\n\n        fillColor = typeof item !== \"undefined\" ? scale(item) : \"#ffffff\";\n\n        layer.setStyle({ 'fillColor': fillColor })\n      }\n\n\n    }\n\n    // TODO: return false and manually update map for updates\n    return false;\n  }\n\n  whenReady = () => {\n    this.setState({ map_loaded: true });\n    console.log(\"mount\")\n  }\n\n\n  render() {\n    const { tiles, dataframe, indexed_by_date, date, handleOnClick, min_val, max_val, lineage } = this.props;\n\n\n\n\n    const scale = getColorScale(min_val, max_val)\n\n    const mapStyle = {\n      fillColor: \"white\",\n      weight: 0.5,\n      color: \"#333333\",\n      fillOpacity: 1,\n    };\n\n    const createColorBar = (dmin, dmax, scale) => {\n\n      const items = [];\n      for (let i = 0; i <= 100; i++) {\n        items.push(\n          <span\n            key={`${i}`}\n            className=\"grad-step\"\n            style={{ backgroundColor: scale(dmin + (i / 100) * (dmax - dmin)) }}\n          ></span>\n        );\n      }\n      items.push(\n        <span key=\"domain-min\" className=\"domain-min\">\n          {Math.ceil(dmin)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-med\" className=\"domain-med\">\n          {Math.ceil((dmin + dmax) * 0.5)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-max\" className=\"domain-max\">\n          {Math.ceil(dmax)}\n        </span>\n      );\n\n      return <div>{items}</div>;\n    };\n\n\n\n    const onEachLad = async (lad, layer) => {\n      console.log('each')\n      const name = lad.properties.lad19nm;\n      const code = lad.properties.lad19cd;\n\n      // layer.options.fillColor =\n      //   typeof item !== \"undefined\" ? await colorScale(data, item) : \"#ffffff\";\n\n      layer.bindPopup(`${name} (${code})`);\n      layer.on({\n        click: (e) => handleOnClick(e, code),\n      });\n    };\n\n    return (\n      <div>\n        <MapContainer style={{ height: \"60vh\" }} zoom={5.5} center={[53.5, -3]}>\n\n          <GeoJSON style={mapStyle} data={tiles} onEachFeature={onEachLad} eventHandlers={{\n            add: this.whenReady\n          }} />\n          <MapUpdater date={date} indexed_by_date={indexed_by_date} dataframe={dataframe} scale={scale} map_loaded={this.state.map_loaded} />\n        </MapContainer>\n        <div className=\"gradient\">\n          <center> {createColorBar(min_val, max_val, scale)}</center>\n        </div>\n      </div>\n    );\n\n  }\n};\n\nexport default Chloropleth;\n","import React from \"react\";\n\n\nimport { Line } from \"react-chartjs-2\";\n\nimport * as ChartAnnotation from 'chartjs-plugin-annotation';\n\n\n\nconst LineChart2 = ({ x, y, upper, lower, y1, upper1, lower1, date,lad }) => {\n\n  const key = date+lad;\n  const state = {\n    labels: x,\n    datasets: [\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: upper,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: lower,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgb(235, 122, 52, 1)\",\n        borderColor: \"#ffa500\",\n        borderWidth: 3,\n        data: y,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n    ],\n  };\n\n  console.log(date)\n\n  const options = {\n    animation: {\n      duration: 0\n    },\n    title: {\n      display: true,\n      text: \"Daily incidence\",\n      fontSize: 14,\n      maintainAspectRatio: false,\n    },\n    annotation: {\n      annotations: [\n        {\n          drawTime: \"afterDatasetsDraw\",\n          id: \"hline\",\n          type: \"line\",\n          mode: \"vertical\",\n          scaleID: \"x-axis-0\",\n          value: date,\n          borderColor: \"black\",\n          borderWidth: 1,\n          /*label: {\n            backgroundColor: \"gray\",\n            content: date,\n            enabled: true\n          }*/\n        }\n      ]\n    }\n\n\n    ,\n    legend: {\n      display: false,\n      position: \"bottom\",\n    },\n  }\n  console.log(options)\n\n\n\n  return (\n    <Line plugins={[ChartAnnotation]}\n      data={state}\n      options={options}\n      key={key}\n    />\n  );\n};\n\nexport default LineChart2;\n","import React from \"react\";\n\nimport LineChart2 from \"./LineChart2\";\n\nimport moment from \"moment\";\nimport memoize from 'memoize-one';\n\nfunction get_lad_data(dataframe, lad,lineage){\n  console.log('calling get')\n  const lad_data = dataframe.where((item) => item.location === lad ).where((item) => item.parameter === \"lambda\" ).where((item) => item.lineage === lineage ).toArray()\n  return(lad_data)\n}\n\nvar memoized_get_lad_data = memoize(get_lad_data)\n\nfunction LocalIncidence({ dataframe, lad, date, name,lineage }) {\n  console.log(lad)\n  let lad_data = memoized_get_lad_data(dataframe,lad,lineage)\n  console.log(lad_data)\n  window.df3 = dataframe\n  window.df4 = lad_data\n  return (<div>\n    <h2>Local incidences</h2>\n    <p className=\"lead\">Local Authority: {name}</p>\n   \n\n    <LineChart2\n  \n     lad={lad}\n      date={date}\n      x={lad_data\n        .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\n      y={lad_data\n        .map((item) => item.mean)}\n      upper={lad_data\n        .map((item) => item.upper)}\n      lower={lad_data\n        .map((item) => item.lower)}\n    />\n\n  </div>\n  );\n}\n\n\nexport default LocalIncidence;\n","import { data } from \"../assets/data_full.json\"\n\nconst dataForge = require('data-forge');\n\n\n\nfunction loadData(){\n\n   const dataframe = new dataForge.DataFrame(data).parseFloats(\"mean\", \"lower\",\"upper\")    \n   return(dataframe);\n  }\n\n\nexport {loadData}","import React, { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport Chloropleth from \"./Chloropleth\";\nimport LocalIncidence from \"./LocalIncidence\";\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport Slider from \"rc-slider\";\n\n\nimport \"rc-slider/assets/index.css\";\n\nimport { loadTiles, getLALookupTable } from \"../utils/loadTiles\";\nimport { loadData } from \"../utils/loadData\";\nimport { min } from \"moment\";\nimport memoize from 'memoize-one';\nlet LALookupTable = getLALookupTable()\n\nfunction get_min_min_max(dataframe, parameter, value_of_interest, lineage) {\n\n  let dataframe_selected_parameter = dataframe.where(x => x.parameter == parameter)\n  dataframe_selected_parameter = dataframe_selected_parameter.where(x => x.lineage === lineage)\n  const series = dataframe_selected_parameter.where(x => x['mean'] != undefined).getSeries(value_of_interest)\n\n  const min_val = 0 // series.min()\n  const max_val = series.max()\n\n\n  let groups = dataframe_selected_parameter.groupBy(x => x.date);\n  let lookup = {}\n  for (const group of groups) {\n\n    const dater = group.first().date;\n    lookup[dater] = group.setIndex('location')\n\n  }\n  console.log(\"returning\")\n  const unique_dates = dataframe.getSeries('date').distinct().toArray()\n  const unique_lineages = dataframe.getSeries('lineage').distinct().toArray()\n\n  return { 'min_val': min_val, 'max_val': max_val, 'dataframe_selected_parameter': lookup, 'series': series, 'unique_dates': unique_dates,\n'unique_lineages':unique_lineages }\n\n\n}\n\nvar memoized_get_min_max = memoize(get_min_min_max)\nlet dataframe = loadData();\nconst Covid19 = () => {\n\n  \n\n  window.df = dataframe\n\n  ///  [data, indexed_by_date, unique_dates, min_val, max_val] \n  const [parameter, setParameter] = useState(\"lambda\");\n  const unique_parameters = ['lambda','p','R']\n  const parameter_of_interest = parameter\n  const value_of_interest = \"mean\"\n\n  const [lineage, setLineage] = useState(\"total\");\n\n  const { min_val, max_val, series, dataframe_selected_parameter, unique_dates, unique_lineages } = memoized_get_min_max(dataframe, parameter_of_interest, value_of_interest, lineage)\n  window.df2 = dataframe_selected_parameter\n  console.log(min_val, max_val)\n\n\n  const[is_playing,setIsPlaying] = useState(false);\n\n\n  const [tiles, setTiles] = useState([]);\n  const [lad, setLad] = useState({\n    lad: \"E08000006\",\n    data: null,\n    scale: null,\n  });\n  const [date, setDate] = useState({\n    date: \"2020-09-01\",\n\n  });\n\n \n\n\n  const handleOnClick = (e, lad) => {\n    setLad({ ...lad, lad, data: null });\n  };\n\n  const handleDateSlider = (e) => {\n    const set_to = unique_dates[e];\n    //console.log(\"date set to \", set_to)\n    setDate({ date: set_to });\n\n\n  };\n\n\n  const bump_date = (e) => {\n    const cur_index = unique_dates.indexOf(date.date)\n    const set_to = unique_dates[cur_index+1]\n    setDate({ date: set_to });\n\n\n  };\n\n  function togglePlay(){\n    console.log(\"toggle\")\n    if(is_playing){\n    setIsPlaying(false)\n    clearInterval(window.bumpTimeout)\n    }\n    else{\n      setIsPlaying(true)\n      window.bumpTimeout = setInterval(() => this.bump_date(),100);\n    }\n\n  }\n\n  function PlayButton(props) {\n\n    if(!props.is_playing){\n    return (\n    <button onClick={props.onClick}><FaPlay /></button>);\n  }else{\n    return (\n    <button onClick={props.onClick}><FaPause /></button>);\n  }\n  }\n\n\n\n\n\n  useEffect(() => {\n    if (tiles.length === 0) setTiles(loadTiles());\n\n  }, [tiles]);\n\n\n  const lineage_options = unique_lineages.map((x) =><option>{x}</option>)\n  const parameter_options = unique_parameters.map((x) =><option>{x}</option>)\n\n  return (\n    <React.Fragment>\n      {tiles && tiles.length === 0 ? (\n        <div className=\"row\">\n          <Spinner />\n        </div>\n      ) : (\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h2>Map</h2>\n              <select value={lineage} name=\"lineages\" onChange={e => setLineage(e.target.value)}>\n                {lineage_options}\n              </select>\n              <select value={parameter} name=\"parameters\" onChange={e => setParameter(e.target.value)}>\n                {parameter_options}\n              </select>\n              <Chloropleth\n                tiles={tiles}\n                max_val={max_val}\n                min_val={min_val}\n                dataframe={dataframe_selected_parameter}\n                date={date.date}\n                scale={date.scale}\n                handleOnClick={handleOnClick}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <h2>Select date</h2>\n              <p className=\"lead\"><PlayButton is_playing={is_playing} onClick={togglePlay} />Current date: {date.date}</p>\n\n              <Slider\n                min={0}\n                max={unique_dates && unique_dates.length - 1}\n                onChange={handleDateSlider}\n                value={unique_dates.indexOf(date.date)}\n              />\n              <hr />\n\n              {<LocalIncidence name={LALookupTable[lad.lad]} date={date.date} lad={lad.lad} dataframe={dataframe} lineage={lineage} />}\n\n            </div>\n          </div>\n        )}\n    </React.Fragment>\n  );\n};\n\nexport default Covid19;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {\n    collapsed: true,\n  };\n  handleToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  render() {\n    const collapsed = this.state.collapsed;\n\n    const classTwo = collapsed\n      ? \"navbar-toggler navbar-toggler-right collapsed\"\n      : \"navbar-toggler navbar-toggler-right\";\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar bg-light transparent-nav\">\n        <div className=\"container\">\n          <NavLink className=\"navbar-brand\" to=\"/\">\n            CovInce\n          </NavLink>\n          <button\n            onClick={this.handleToggle}\n            className={`${classTwo}`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarResponsive\"\n            aria-controls=\"navbarResponsive\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* <div className={`${classOne}`} id=\"navbarResponsive\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/add-user\">\n                  Add User\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/user-list\">\n                  Userlist\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/status\">\n                  Status\n                </NavLink>\n              </li>\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/register\">\n                    Register\n                  </NavLink>\n                </li>\n              )}\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/login\">\n                    Login\n                  </NavLink>\n                </li>\n              )}\n              {this.props.user && (\n                <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/profile\">\n                      {this.props.user.username}\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/logout\">\n                      Logout\n                    </NavLink>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </div> */}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport Covid19 from './Covid19'\nimport Slider from \"rc-slider\";\nfunction ContainerWithTimer() {\n    return (\n      <React.Fragment>\n       <Covid19 />\n      </React.Fragment>\n    );\n  }\n  \n\nexport default ContainerWithTimer","import React from 'react';\nimport Covid19 from \"./components/Covid19\"\nimport NavBar from \"./components/NavBar\"\nimport './App.css';\nimport ContainerWithTimer from './components/ContainerWithTimer';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n    <div className=\"container\">\n      \n      <ContainerWithTimer />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<BrowserRouter basename=\"/covid19-web\"><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}