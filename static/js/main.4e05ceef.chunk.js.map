{"version":3,"sources":["components/Spinner.jsx","utils/loadTiles.js","components/Chloropleth.jsx","components/MultiLinePlot.jsx","components/LocalIncidence.jsx","utils/loadData.js","components/Covid19.jsx","components/NavBar.jsx","components/ContainerWithTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","style","display","justifyContent","alignItems","height","className","role","colormap","require","MapUpdater","date","indexed_by_date","dataframe","scale","map","map_loaded","useMap","window","Chloropleth","state","whenReady","setState","console","log","nextProps","nextState","by_loc","getSeries","undefined","i","_layers","layer","setStyle","feature","fillColor","item","getRowByIndex","properties","lad19cd","lad","weight","color","this","props","color_scale_type","tiles","handleOnClick","min_val","max_val","lineage","Date","dmin","dmax","colors","nshades","format","alpha","reverse","number","dmax_val","dmin_val","number_val","Math","sqrt","round","portion_of_scale_to_use","getColorScale","onEachLad","a","name","lad19nm","code","bindPopup","on","click","e","MapContainer","zoom","center","GeoJSON","fillOpacity","data","onEachFeature","eventHandlers","add","midpoint","ceil","items","push","backgroundColor","createColorBar","React","Component","MultiLinePlot","lad_data","parameter","type","filter","x","grouped","_","groupBy","for_lambda","lineages","Set","Object","entries","key","value","row","mean","range","Array","from","CustomTooltip","active","payload","label","index","stroke","ComposedChart","width","CartesianGrid","Area","isAnimationActive","stackId","dot","dataKey","fill","XAxis","YAxis","tickFormatter","parseFloat","toFixed","domain","ReferenceLine","strokeWidth","strokeDasharray","Tooltip","content","Line","memoized_get_lad_data","memoize","where","location","toArray","LocalIncidence","useState","proportion_display_type","setProportionDisplayType","class","Checkbox","checked","onChange","event","target","toggle","loadData","ltlas","dataForge","default_lineage","LALookupTable","lookup_table","features","forEach","getLALookupTable","memoized_get_min_max","value_of_interest","dataframe_selected_parameter","series","max","groups","lookup","group","first","setIndex","distinct","Covid19","results","playing","unique_lineages","clearTimeout","timeout","setTimeout","bump_date","setParameter","unique_parameters","parameter_of_interest","setLineage","lineageData","setLineageData","areaData","setAreaData","lineage_options","setTiles","setLad","setDate","setScale","carefulSetLineage","setParameterAndChangeScale","axios","get","then","res","df","DataFrame","new_data","lower","upper","cur_index","indexOf","set_to","useEffect","length","scale_options","parameter_options","Fragment","min","NavBar","collapsed","handleToggle","classTwo","to","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","PlayButton","onPause","onPlay","ContainerWithTimer","setPlaying","position","App","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.4e05ceef.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"spinner-border text-secondary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { features } from \"../assets/Local_Authority_Districts__December_2019__Boundaries_UK_BGC.json\" // Can change to BUC to reduce bundle size\r\n//import { features } from \"../assets/hex.json\" // Can change to BUC to reduce bundle size\r\n\r\n\r\nlet colormap = require('colormap')\r\n\r\nfunction getColorScale(dmin, dmax, color_scale_type) {\r\n    //dmin=0\r\n    // dmax = 200\r\n\r\n    console.log(\"GCS\")\r\n\r\n    let nshades = 4000;\r\n\r\n    let colors = colormap({\r\n        colormap: 'magma',\r\n        nshades: nshades,\r\n        format: 'hex',\r\n        alpha: 1\r\n    }).reverse()\r\n\r\n    let scale = function (number) {\r\n\r\n        if (number > dmax) { number = dmax - 1 }\r\n        let dmax_val,dmin_val, number_val\r\n\r\n        if(color_scale_type==\"quadratic\"){\r\n\r\n          dmax_val = Math.sqrt(dmax)\r\n          dmin_val = Math.sqrt(dmin)\r\n          number_val = Math.sqrt(number)\r\n\r\n        }\r\n        else{\r\n            dmax_val = dmax\r\n            dmin_val = dmin\r\n            number_val = number\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        //console.log(\"scale\",)\r\n        let portion_of_scale_to_use = 0.9; // don't go to deep black\r\n        return (colors[Math.round(portion_of_scale_to_use * nshades * (number_val - dmin_val) / (dmax_val - dmin_val))])\r\n\r\n    }\r\n    return scale\r\n}\r\n\r\n\r\n\r\nfunction loadTiles() {\r\n    return features\r\n}\r\n\r\n\r\nfunction getLALookupTable() {\r\n    let lookup_table = {};\r\n\r\n    features.forEach((item) => {\r\n\r\n        lookup_table[item.properties.lad19cd] = item.properties.lad19nm\r\n    })\r\n    return (lookup_table)\r\n}\r\n\r\n\r\nexport { loadTiles, getColorScale, getLALookupTable }\r\n","import React from \"react\";\nimport { MapContainer, GeoJSON, useMap } from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Chloropleth.css\";\nimport { getColorScale } from \"../utils/loadTiles\";\n\n\n\n\nconst MapUpdater = ({ date, indexed_by_date, dataframe, scale, map_loaded }) => {\n\n\n  const map = useMap()\n\n  window.map = map\n  window.scale = scale\n\n  return (false)\n}\n\n\n\nclass Chloropleth extends React.Component {\n\n  state = {\n    map_loaded: false\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n\n\n\n    const { dataframe, date } = nextProps\n\n   \n    \n    const by_loc = dataframe[date].getSeries('mean')\n    window.by_loc = by_loc\n    console.log(\"updating\")\n    const map = window.map\n    if (map == undefined){\n      return true\n    }\n    const scale = window.scale\n    for (var i in map._layers) {\n\n      const layer = map._layers[i]\n      if (layer.setStyle && layer.feature) {\n        let fillColor = null\n\n        const item = by_loc.getRowByIndex(layer.feature.properties.lad19cd);\n        //console.log(layer.feature.properties.lad19cd,item)\n\n        fillColor = typeof item !== \"undefined\" ? scale(item) : \"#ffffff\";\n\n        layer.setStyle({ 'fillColor': fillColor })\n\n        if(layer.feature.properties.lad19cd == nextProps.lad){\n          //layer.setStyle({ 'stroke-width': \"5\" })\n          layer.setStyle({ weight:1})\n          layer.setStyle({ color:'black'})\n        }\n        else{\n          layer.setStyle({ weight:0.5})\n          layer.setStyle({ color:'#333333'})\n        }\n      }\n\n\n    }\n    if (nextProps.dataframe!== this.props.dataframe || nextProps.color_scale_type!== this.props.color_scale_type){\n      return true;\n    }\n    // TODO: return false and manually update map for updates\n    return false;\n  }\n\n  whenReady = () => {\n    this.setState({ map_loaded: true });\n    console.log(\"mount\")\n  }\n\n\n  render() {\n    const {color_scale_type, tiles, dataframe, indexed_by_date, date, handleOnClick, min_val, max_val, lineage } = this.props;\n\n    this.setState({'updateagain': new Date()})\n\n\n    const scale = getColorScale(min_val, max_val,color_scale_type)\n\n    const mapStyle = {\n      fillColor: \"white\",\n      weight: 0.5,\n      color: \"#333333\",\n      fillOpacity: 1,\n    };\n\n    const createColorBar = (dmin, dmax, scale) => {\n      let midpoint\n      if (dmax>2){\n\n      midpoint = Math.ceil((dmin + dmax) * 0.5)\n      }\n      else{\n        midpoint = Math.round(10*(dmin + dmax) * 0.5)/10\n\n      }\n\n      const items = [];\n      for (let i = 0; i <= 100; i++) {\n        items.push(\n          <span\n            key={`${i}`}\n            className=\"grad-step\"\n            style={{ backgroundColor: scale(dmin + (i / 100) * (dmax - dmin)) }}\n          ></span>\n        );\n      }\n      items.push(\n        <span key=\"domain-min\" className=\"domain-min\">\n          {Math.ceil(dmin)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-med\" className=\"domain-med\">\n          {midpoint}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-max\" className=\"domain-max\">\n          {Math.ceil(dmax)}\n        </span>\n      );\n\n      return <div>{items}</div>;\n    };\n\n\n\n    const onEachLad = async (lad, layer) => {\n      console.log('each')\n      const name = lad.properties.lad19nm;\n      const code = lad.properties.lad19cd;\n\n      // layer.options.fillColor =\n      //   typeof item !== \"undefined\" ? await colorScale(data, item) : \"#ffffff\";\n\n      layer.bindPopup(`${name}`);\n      layer.on({\n        click: (e) => handleOnClick(e, code),\n      });\n    };\n\n    return (\n      <div>\n        <MapContainer style={{ height: \"60vh\" }} zoom={5.5} center={[53.5, -3]}>\n\n          <GeoJSON style={mapStyle} data={tiles} onEachFeature={onEachLad} eventHandlers={{\n            add: this.whenReady\n          }} />\n          <MapUpdater date={date} indexed_by_date={indexed_by_date} dataframe={dataframe} scale={scale} map_loaded={this.state.map_loaded} />\n        </MapContainer>\n        <div className=\"gradient\">\n          <center> {createColorBar(min_val, max_val, scale)}</center>\n        </div>\n      </div>\n    );\n\n  }\n};\n\nexport default Chloropleth;\n","import React from \"react\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine, ComposedChart, Area } from 'recharts';\r\nimport _ from 'lodash';\r\n\r\nconst MultiLinePlot = ({ date, lad_data, parameter, type }) => {\r\n\r\n  const data = lad_data.filter(x => x.parameter == parameter).filter(x => x.lineage != \"total\")\r\n  const grouped = _.groupBy(data, \"date\"); // creates an object where the key is the Time and the values are arrays of rows with that Time\r\n  const for_lambda = []; // array to store the resulting data\r\n  let lineages = new Set()\r\n  for (const [key, value] of Object.entries(grouped)) { // loop over each group, key is the Time of the group, value is an array of rows for that Time\r\n    const row = { date: key };\r\n    for (const item of value) {\r\n      row[item.lineage] = item.mean;\r\n      row[item.lineage + \"_range\"] = item.range;\r\n      lineages.add(item.lineage)\r\n    }\r\n    for_lambda.push(row);\r\n  }\r\n\r\n  lineages = Array.from(lineages);\r\n  window.lineages = lineages\r\n  const colors = ['red', 'green', 'blue', 'orange', 'pink','#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']\r\n\r\n  const CustomTooltip = ({ active, payload, label }) => {\r\n    if (active && payload) {\r\n\r\n      return (\r\n        <div className=\"custom-tooltip\">\r\n          <div className=\"tooltip_header\">{label}</div>\r\n          {payload.map((value, index) => {\r\n            if (value.name != \"_range\") {\r\n              return (\r\n                <div className=\"tooltip_entry\" style={{ 'color': value.stroke }} >{`${value.name} : ${value.value}`}</div>)\r\n            }\r\n          }\r\n          )}\r\n\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n\r\n  if (type == \"area\") {\r\n    return (<ComposedChart data={for_lambda} width={500} height={200}>\r\n      <CartesianGrid stroke=\"#ccc\" />\r\n\r\n      {lineages.map((value, index) => {\r\n\r\n        return <Area  isAnimationActive={false} stackId=\"1\" dot={false} name={value} type=\"monotone\" dataKey={value} fill={colors[index]} stroke={colors[index]} />\r\n      })}\r\n\r\n\r\n      <XAxis dataKey=\"date\" />\r\n      <YAxis tickFormatter={value => parseFloat(value).toFixed(2)} domain={[0, 1]} />\r\n      <ReferenceLine x={date} stroke=\"#aaa\" label=\"\" strokeWidth={1} strokeDasharray=\"3 3\" />\r\n\r\n      <Tooltip content={CustomTooltip} />\r\n    </ComposedChart>)\r\n  }\r\n  else {\r\n    return (<ComposedChart data={for_lambda} width={500} height={200}>\r\n      <CartesianGrid stroke=\"#ccc\" />\r\n\r\n\r\n      {lineages.map((value, index) => {\r\n\r\n        return <Area  isAnimationActive={false}  type=\"monotone\" name=\"_range\" dataKey={value + \"_range\"} fill={colors[index]} strokeWidth={0} />\r\n      })}\r\n      {lineages.map((value, index) => {\r\n\r\n        return <Line isAnimationActive={false} dot={false} name={value} type=\"monotone\" dataKey={value} stroke={colors[index]} />\r\n      })}\r\n\r\n\r\n      <XAxis dataKey=\"date\" />\r\n      <YAxis />\r\n      <ReferenceLine x={date} stroke=\"#aaa\" label=\"\" strokeWidth={1} strokeDasharray=\"3 3\" />\r\n\r\n      <Tooltip content={CustomTooltip} />\r\n    </ComposedChart>)\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default MultiLinePlot;","import React, { useState } from 'react';\r\n\r\n\r\nimport moment from \"moment\";\r\nimport memoize from 'memoize-one';\r\nimport MultiLinePlot from \"./MultiLinePlot\";\r\nimport { Form, Radio, Checkbox } from \"semantic-ui-react\";\r\n\r\nfunction get_lad_data(dataframe, lad, lineage) {\r\n\r\n  //const lad_data = dataframe.where((item) => item.location === lad ).where((item) => item.parameter === \"lambda\" ).where((item) => item.lineage === lineage ).toArray()\r\n  const lad_data = dataframe.where((item) => item.location === lad).toArray()\r\n  return (lad_data)\r\n}\r\n\r\nvar memoized_get_lad_data = memoize(get_lad_data)\r\n\r\nfunction LocalIncidence({ dataframe, lad, date, name, lineage }) {\r\n\r\n  let lad_data = memoized_get_lad_data(dataframe, lad, lineage)\r\n \r\n\r\n\r\n\r\n  const [proportion_display_type, setProportionDisplayType] = useState(\"area\");\r\n\r\n  let handleChange = function (event) {\r\n    const target = event.target;\r\n    if (target.checked) {\r\n      setProportionDisplayType(\"area\")\r\n    }\r\n    else {\r\n      setProportionDisplayType(\"line\")\r\n    }\r\n  }\r\n\r\n  return (<div>\r\n    <h2>Local incidences</h2>\r\n    <p className=\"lead\">Local Authority: {name} <small class=\"ltla_small_text\">{lad}</small></p>\r\n\r\n\r\n\r\n    <div class=\"graph_header\">Incidence</div>\r\n    <MultiLinePlot lad_data={lad_data} date={date} parameter=\"lambda\" />\r\n    <hr class=\"graphdivider\" />\r\n    <div class=\"graph_header\">Proportion <div class=\"right_align\"><Checkbox style={{ \"display\": \"inline-block\" }} checked={proportion_display_type == \"area\"} onChange={handleChange} toggle label=\"Area\" /></div>\r\n\r\n    </div>\r\n    {proportion_display_type == \"line\" && <MultiLinePlot lad_data={lad_data} date={date} parameter=\"p\" />}\r\n    {proportion_display_type == \"area\" && <MultiLinePlot lad_data={lad_data} date={date} parameter=\"p\" type=\"area\" />}\r\n\r\n\r\n    <hr class=\"graphdivider\" />\r\n    <div class=\"graph_header\">R</div>\r\n    <MultiLinePlot lad_data={lad_data} date={date} parameter=\"R\" />\r\n\r\n    {/*lad={lad}\r\n      date={date}\r\n      x={lad_data\r\n        .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\r\n      y={lad_data\r\n        .map((item) => item.mean)}\r\n      upper={lad_data\r\n        .map((item) => item.upper)}\r\n      lower={lad_data\r\n      .map((item) => item.lower)}*/}\r\n\r\n\r\n  </div>\r\n  );\r\n}\r\n\r\n\r\nexport default LocalIncidence;\r\n","import { ltlas,lineages } from \"../assets/lists.json\"\r\n\r\n\r\n\r\nconst dataForge = require('data-forge');\r\n\r\n\r\n\r\nfunction loadData() {\r\n  return{'ltlas':ltlas, 'lineages':lineages}\r\n}\r\n\r\n\r\nexport { loadData }","import React, { useState, useEffect } from \"react\";\r\nimport Spinner from \"./Spinner\";\r\nimport Chloropleth from \"./Chloropleth\";\r\nimport LocalIncidence from \"./LocalIncidence\";\r\n\r\nimport Slider from \"rc-slider\";\r\n\r\n\r\nimport \"rc-slider/assets/index.css\";\r\n\r\nimport { loadTiles, getLALookupTable } from \"../utils/loadTiles\";\r\nimport { loadData } from \"../utils/loadData\";\r\nimport { min } from \"moment\";\r\nimport memoize from 'memoize-one';\r\nimport axios from 'axios';\r\n\r\nconst dataForge = require('data-forge');\r\n\r\nlet default_lineage = \"B.1.1.7\"\r\n\r\nlet LALookupTable = getLALookupTable()\r\n\r\nfunction get_min_min_max(dataframe, parameter, value_of_interest, lineage) {\r\n\r\n  let dataframe_selected_parameter = dataframe.where(x => x.parameter == parameter)\r\n  const series = dataframe_selected_parameter.where(x => x['mean'] != undefined).getSeries(value_of_interest)\r\n\r\n  const min_val = 0 // series.min()\r\n  const max_val = series.max()\r\n\r\n\r\n  let groups = dataframe_selected_parameter.groupBy(x => x.date);\r\n  let lookup = {}\r\n  for (const group of groups) {\r\n\r\n    const dater = group.first().date;\r\n    lookup[dater] = group.setIndex('location')\r\n\r\n  }\r\n\r\n  const unique_dates = dataframe.getSeries('date').distinct().toArray()\r\n\r\n  return {\r\n    'min_val': min_val, 'max_val': max_val, 'dataframe_selected_parameter': lookup, 'series': series, 'unique_dates': unique_dates\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nvar memoized_get_min_max = memoize(get_min_min_max)\r\nlet lists = loadData();\r\nconst Covid19 = ({ playing }) => {\r\n  let unique_lineages = loadData()['lineages']\r\n  let results\r\n  console.log('playing', playing)\r\n  if (playing) {\r\n    clearTimeout(window.timeout)\r\n    window.timeout = setTimeout(x => {\r\n      bump_date()\r\n      console.log('date bumped')\r\n    }, 100)\r\n  }\r\n\r\n\r\n\r\n\r\n  ///  [data, indexed_by_date, unique_dates, min_val, max_val] \r\n  const [parameter, setParameter] = useState(\"p\");\r\n  let unique_parameters = ['lambda', 'p', 'R']\r\n  const parameter_of_interest = parameter\r\n  const value_of_interest = \"mean\"\r\n\r\n  const [lineage, setLineage] = useState(default_lineage);\r\n  const [lineageData, setLineageData] = useState(null);\r\n\r\n  const [areaData, setAreaData] = useState(null);\r\n\r\n  if (lineageData !== null) {\r\n    console.log('hi')\r\n    results = memoized_get_min_max(lineageData, parameter_of_interest, value_of_interest, lineage)\r\n    \r\n  }\r\n\r\n\r\n  const [is_playing, setIsPlaying] = useState(false);\r\n\r\n\r\n  const [tiles, setTiles] = useState([]);\r\n  const [lad, setLad] = useState({\r\n    lad: \"E08000006\",\r\n    data: null,\r\n    scale: null,\r\n  });\r\n  const [date, setDate] = useState({\r\n    date: \"2020-09-01\",\r\n\r\n  });\r\n\r\n  const [color_scale_type, setScale] = useState(\"linear\");\r\n\r\n  const carefulSetLineage = (x) => {\r\n\r\n    if (x === \"total\") {\r\n      setParameterAndChangeScale(\"lambda\");\r\n      console.log(\"Changing parameter as total only supports lambda\")\r\n    }\r\n\r\n    axios.get(`./data/lineage/${x}.json`)\r\n      .then(res => {\r\n       \r\n        const df = new dataForge.DataFrame(res.data.data)\r\n        window.df = df\r\n        setLineageData(df)\r\n        console.log(\"got res\")\r\n      });\r\n\r\n\r\n    setLineage(x);\r\n  }\r\n\r\n  const setParameterAndChangeScale = (x) => {\r\n    setParameter(x);\r\n    if (x === \"p\") { setScale(\"linear\") }\r\n    if (x === \"lambda\") { setScale(\"quadratic\") }\r\n    if (x === \"R\") { setScale(\"linear\") }\r\n  }\r\n\r\n  const handleOnClick = (e, lad) => {\r\n    setLad({ ...lad, lad, data: null });\r\n    axios.get(`./data/ltla/${lad}.json`)\r\n      .then(res => {\r\n       \r\n        const new_data = res.data.data.map(x => {\r\n          x.range = [x.lower,x.upper];\r\n          return(x)\r\n        } )\r\n        const df = new dataForge.DataFrame(new_data)\r\n      \r\n        setAreaData(df)\r\n        console.log(\"got area res\")\r\n      });\r\n  };\r\n\r\n  const handleDateSlider = (e) => {\r\n    const set_to = results['unique_dates'][e];\r\n\r\n    setDate({ date: set_to });\r\n\r\n\r\n  };\r\n\r\n\r\n  const bump_date = (e) => {\r\n    let cur_index = results['unique_dates'].indexOf(date.date)\r\n    if (results['unique_dates'][cur_index + 1] == undefined) {\r\n      cur_index = -1\r\n    }\r\n    const set_to = results['unique_dates'][cur_index + 1]\r\n    setDate({ date: set_to });\r\n\r\n\r\n  };\r\n\r\n  function togglePlay() {\r\n\r\n    if (is_playing) {\r\n      setIsPlaying(false)\r\n      clearInterval(window.bumpTimeout)\r\n    }\r\n    else {\r\n      setIsPlaying(true)\r\n      window.bumpTimeout = setInterval(() => this.bump_date(), 100);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (tiles.length === 0) setTiles(loadTiles());\r\n    if (lineageData == null) {\r\n      carefulSetLineage(default_lineage)\r\n    }\r\n    if (lineageData == null) {\r\n      handleOnClick(null,\"E08000006\")\r\n    }\r\n\r\n  }, [tiles, lineageData]);\r\n\r\n  let lineage_options\r\n  if (lineageData) {\r\n    lineage_options = unique_lineages.map((x) => <option>{x}</option>)\r\n  }\r\n  const scale_options = [['quadratic', 'Quadratic'], ['linear', 'Linear']].map((x) => <option value={x[0]}>{x[1]}</option>)\r\n  unique_parameters = [['lambda', 'Incidence'], ['p', 'Proportion'], ['R', 'R']]\r\n  if (lineage === \"total\") {\r\n    unique_parameters = unique_parameters.filter(x => x[0] !== \"p\" && x[0] !== \"R\")\r\n  }\r\n  const parameter_options = unique_parameters.map((x) => <option value={x[0]}>{x[1]}</option>)\r\n\r\n\r\n  return (\r\n\r\n    <React.Fragment>\r\n      {( lineageData==null| areaData==null )  ? (\r\n        <div className=\"row\">\r\n          <Spinner />\r\n        </div>\r\n      ) : (\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h2>Select date</h2>\r\n              <p className=\"lead\">Current date: {date.date}</p>\r\n\r\n              <Slider\r\n                min={0}\r\n                max={results['unique_dates'] && results['unique_dates'].length - 1}\r\n                onChange={handleDateSlider}\r\n                value={results['unique_dates'].indexOf(date.date)}\r\n              />\r\n              <hr />\r\n              <h2>Map</h2>\r\n              <div class='map_controls'>\r\n                Lineage: <select value={lineage} name=\"lineages\" onChange={e => carefulSetLineage(e.target.value)}>\r\n                  {lineage_options}\r\n                </select>&nbsp;&nbsp;&nbsp;\r\n              Color by: <select value={parameter} name=\"parameters\" onChange={e => setParameterAndChangeScale(e.target.value)}>\r\n                  {parameter_options}&nbsp;\r\n              </select>\r\n              </div>\r\n              <Chloropleth\r\n                lad={lad.lad}\r\n                tiles={tiles}\r\n                color_scale_type={color_scale_type}\r\n                max_val={results['max_val']}\r\n                min_val={results['min_val']}\r\n                dataframe={results['dataframe_selected_parameter']}\r\n                date={date.date}\r\n                scale={date.scale}\r\n                handleOnClick={handleOnClick}\r\n              />\r\n              <div class='scale_control_holder'>\r\n                Scale:&nbsp;<select value={color_scale_type} name=\"color_scale_type\" onChange={e => setScale(e.target.value)}>\r\n                  {scale_options}\r\n                </select>\r\n              </div></div>\r\n\r\n            <div className=\"col-md-6\">\r\n\r\n\r\n              {<LocalIncidence name={LALookupTable[lad.lad]} date={date.date} lad={lad.lad} dataframe={areaData} lineage={lineage} />}\r\n\r\n            </div>\r\n          </div>\r\n        )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Covid19;\r\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {\n    collapsed: true,\n  };\n  handleToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  render() {\n    const collapsed = this.state.collapsed;\n\n    const classTwo = collapsed\n      ? \"navbar-toggler navbar-toggler-right collapsed\"\n      : \"navbar-toggler navbar-toggler-right\";\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar bg-light transparent-nav\">\n        <div className=\"container\">\n          <NavLink className=\"navbar-brand\" to=\"/\">\n            CovInce\n          </NavLink>\n          <button\n            onClick={this.handleToggle}\n            className={`${classTwo}`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarResponsive\"\n            aria-controls=\"navbarResponsive\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* <div className={`${classOne}`} id=\"navbarResponsive\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/add-user\">\n                  Add User\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/user-list\">\n                  Userlist\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/status\">\n                  Status\n                </NavLink>\n              </li>\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/register\">\n                    Register\n                  </NavLink>\n                </li>\n              )}\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/login\">\n                    Login\n                  </NavLink>\n                </li>\n              )}\n              {this.props.user && (\n                <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/profile\">\n                      {this.props.user.username}\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/logout\">\n                      Logout\n                    </NavLink>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </div> */}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { useState, useEffect } from \"react\";\r\nimport Covid19 from './Covid19'\r\nimport Slider from \"rc-slider\";\r\nimport { FaPlay, FaPause } from 'react-icons/fa';\r\n\r\nfunction PlayButton(props) {\r\n\r\n\r\n  if (!props.playing) {\r\n    return (\r\n      <button onClick={props.onPlay}><FaPlay /></button>\r\n    );\r\n  } else {\r\n    return (\r\n      <button onClick={props.onPause}><FaPause /></button>);\r\n  }\r\n}\r\n\r\n\r\nfunction ContainerWithTimer() {\r\n const [playing,setPlaying] = useState(false)\r\n  const play = () =>{\r\n    setPlaying(true)\r\n    \r\n  }\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\" style={{position:'relative'}}>\r\n        <div className=\"play_control\">&nbsp;&nbsp;<PlayButton playing={playing} onPlay={x=>setPlaying(true)} onPause={x=>setPlaying(false)} /></div>\r\n        </div>\r\n        </div>\r\n        <Covid19  playing={playing}/>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n\r\nexport default ContainerWithTimer","import React from 'react';\nimport Covid19 from \"./components/Covid19\"\nimport NavBar from \"./components/NavBar\"\nimport './App.css';\nimport ContainerWithTimer from './components/ContainerWithTimer';\n\n\nfunction App() {\n\n  document.getElementById('spinner').style.display = 'none'\n  return (\n    <React.Fragment>\n      <NavBar />\n    <div className=\"container\">\n      \n      <ContainerWithTimer />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nReactDOM.render(<BrowserRouter basename=\"/covid19-web\"><App /></BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}