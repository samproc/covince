{"version":3,"sources":["components/Spinner.jsx","utils/loadTiles.js","components/Chloropleth.jsx","components/MultiLinePlot.jsx","components/LocalIncidence.jsx","utils/loadData.js","components/Covid19.jsx","components/NavBar.jsx","components/ContainerWithTimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","style","display","justifyContent","alignItems","height","className","role","colormap","require","MapUpdater","date","indexed_by_date","dataframe","scale","map","map_loaded","useMap","window","Chloropleth","state","whenReady","setState","console","log","nextProps","nextState","by_loc","getSeries","undefined","i","_layers","layer","setStyle","feature","fillColor","item","getRowByIndex","properties","lad19cd","lad","weight","color","this","props","tiles","handleOnClick","min_val","max_val","lineage","Date","dmin","dmax","colors","nshades","format","alpha","reverse","number","max_log","Math","sqrt","min_log","num_log","round","portion_of_scale_to_use","getColorScale","onEachLad","a","name","lad19nm","code","bindPopup","on","click","e","MapContainer","zoom","center","GeoJSON","fillOpacity","data","onEachFeature","eventHandlers","add","items","push","backgroundColor","ceil","createColorBar","React","Component","MultiLinePlot","lad_data","parameter","type","filter","x","grouped","_","groupBy","for_lambda","lineages","Set","Object","entries","key","value","row","mean","range","Array","from","CustomTooltip","active","payload","label","index","stroke","ComposedChart","width","CartesianGrid","Area","stackId","dot","dataKey","fill","XAxis","YAxis","tickFormatter","parseFloat","toFixed","domain","ReferenceLine","strokeWidth","strokeDasharray","Tooltip","content","Line","memoized_get_lad_data","memoize","where","location","toArray","LocalIncidence","useState","proportion_display_type","setProportionDisplayType","Checkbox","checked","onChange","event","target","toggle","dataForge","LALookupTable","lookup_table","features","forEach","getLALookupTable","memoized_get_min_max","value_of_interest","dataframe_selected_parameter","series","max","groups","lookup","group","first","setIndex","distinct","new_data","lower","upper","DataFrame","loadData","Covid19","df","setParameter","unique_parameters","parameter_of_interest","setLineage","unique_dates","unique_lineages","df2","is_playing","setIsPlaying","setTiles","setLad","setDate","PlayButton","useEffect","length","lineage_options","parameter_options","Fragment","onClick","clearInterval","bumpTimeout","setInterval","bump_date","min","set_to","indexOf","NavBar","collapsed","handleToggle","classTwo","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ContainerWithTimer","App","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.34d532a9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"spinner-border text-secondary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { features } from \"../assets/Local_Authority_Districts__December_2019__Boundaries_UK_BGC.json\" // Can change to BUC to reduce bundle size\n//import { features } from \"../assets/hex.json\" // Can change to BUC to reduce bundle size\n\n\nlet colormap = require('colormap')\n\nfunction getColorScale(dmin, dmax) {\n    //dmin=0\n    // dmax = 200\n\n    console.log(\"GCS\")\n\n    let nshades = 4000;\n\n    let colors = colormap({\n        colormap: 'magma',\n        nshades: nshades,\n        format: 'hex',\n        alpha: 1\n    }).reverse()\n\n    let scale = function (number) {\n\n        if (number > dmax) { number = dmax - 1 }\n\n        const max_log = Math.sqrt(dmax)\n        const min_log = Math.sqrt(dmin)\n        const num_log = Math.sqrt(number)\n\n\n\n\n\n        //console.log(\"scale\",)\n        let portion_of_scale_to_use = 0.9; // don't go to deep black\n        return (colors[Math.round(portion_of_scale_to_use * nshades * (num_log - min_log) / (max_log - min_log))])\n\n    }\n    return scale\n}\n\n\n\nfunction loadTiles() {\n    return features\n}\n\n\nfunction getLALookupTable() {\n    let lookup_table = {};\n\n    features.forEach((item) => {\n\n        lookup_table[item.properties.lad19cd] = item.properties.lad19nm\n    })\n    return (lookup_table)\n}\n\n\nexport { loadTiles, getColorScale, getLALookupTable }\n","import React from \"react\";\nimport { MapContainer, GeoJSON, useMap } from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Chloropleth.css\";\nimport { getColorScale } from \"../utils/loadTiles\";\n\n\n\n\nconst MapUpdater = ({ date, indexed_by_date, dataframe, scale, map_loaded }) => {\n\n\n  const map = useMap()\n\n  window.map = map\n  window.scale = scale\n\n  return (false)\n}\n\n\n\nclass Chloropleth extends React.Component {\n\n  state = {\n    map_loaded: false\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n\n\n\n    const { dataframe, date } = nextProps\n\n   \n    \n    const by_loc = dataframe[date].getSeries('mean')\n    window.by_loc = by_loc\n    console.log(\"updating\")\n    const map = window.map\n    if (map == undefined){\n      return true\n    }\n    const scale = window.scale\n    for (var i in map._layers) {\n\n      const layer = map._layers[i]\n      if (layer.setStyle && layer.feature) {\n        let fillColor = null\n\n        const item = by_loc.getRowByIndex(layer.feature.properties.lad19cd);\n        //console.log(layer.feature.properties.lad19cd,item)\n\n        fillColor = typeof item !== \"undefined\" ? scale(item) : \"#ffffff\";\n\n        layer.setStyle({ 'fillColor': fillColor })\n\n        if(layer.feature.properties.lad19cd == nextProps.lad){\n          //layer.setStyle({ 'stroke-width': \"5\" })\n          layer.setStyle({ weight:1})\n          layer.setStyle({ color:'black'})\n        }\n        else{\n          layer.setStyle({ weight:0.5})\n          layer.setStyle({ color:'#333333'})\n        }\n      }\n\n\n    }\n    if (nextProps.dataframe!== this.props.dataframe){\n      return true;\n    }\n    // TODO: return false and manually update map for updates\n    return false;\n  }\n\n  whenReady = () => {\n    this.setState({ map_loaded: true });\n    console.log(\"mount\")\n  }\n\n\n  render() {\n    const { tiles, dataframe, indexed_by_date, date, handleOnClick, min_val, max_val, lineage } = this.props;\n\n    this.setState({'updateagain': new Date()})\n\n\n    const scale = getColorScale(min_val, max_val)\n\n    const mapStyle = {\n      fillColor: \"white\",\n      weight: 0.5,\n      color: \"#333333\",\n      fillOpacity: 1,\n    };\n\n    const createColorBar = (dmin, dmax, scale) => {\n\n      const items = [];\n      for (let i = 0; i <= 100; i++) {\n        items.push(\n          <span\n            key={`${i}`}\n            className=\"grad-step\"\n            style={{ backgroundColor: scale(dmin + (i / 100) * (dmax - dmin)) }}\n          ></span>\n        );\n      }\n      items.push(\n        <span key=\"domain-min\" className=\"domain-min\">\n          {Math.ceil(dmin)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-med\" className=\"domain-med\">\n          {Math.ceil((dmin + dmax) * 0.5)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-max\" className=\"domain-max\">\n          {Math.ceil(dmax)}\n        </span>\n      );\n\n      return <div>{items}</div>;\n    };\n\n\n\n    const onEachLad = async (lad, layer) => {\n      console.log('each')\n      const name = lad.properties.lad19nm;\n      const code = lad.properties.lad19cd;\n\n      // layer.options.fillColor =\n      //   typeof item !== \"undefined\" ? await colorScale(data, item) : \"#ffffff\";\n\n      layer.bindPopup(`${name}`);\n      layer.on({\n        click: (e) => handleOnClick(e, code),\n      });\n    };\n\n    return (\n      <div>\n        <MapContainer style={{ height: \"60vh\" }} zoom={5.5} center={[53.5, -3]}>\n\n          <GeoJSON style={mapStyle} data={tiles} onEachFeature={onEachLad} eventHandlers={{\n            add: this.whenReady\n          }} />\n          <MapUpdater date={date} indexed_by_date={indexed_by_date} dataframe={dataframe} scale={scale} map_loaded={this.state.map_loaded} />\n        </MapContainer>\n        <div className=\"gradient\">\n          <center> {createColorBar(min_val, max_val, scale)}</center>\n        </div>\n      </div>\n    );\n\n  }\n};\n\nexport default Chloropleth;\n","import React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine, ComposedChart, Area } from 'recharts';\nimport _ from 'lodash';\n\nconst MultiLinePlot = ({date,lad_data,parameter,type}) => {\n    const data = lad_data.filter(x=> x.parameter==parameter).filter(x=> x.lineage!=\"total\")\n    const grouped = _.groupBy(data, \"date\"); // creates an object where the key is the Time and the values are arrays of rows with that Time\n    const for_lambda = []; // array to store the resulting data\n    let lineages = new Set()\n    for (const [key, value] of Object.entries(grouped)) { // loop over each group, key is the Time of the group, value is an array of rows for that Time\n      const row = { date: key };\n      for (const item of value) {\n        row[item.lineage] = item.mean;\n        row[item.lineage + \"_range\"] = item.range;\n        lineages.add(item.lineage)\n      }\n      for_lambda.push(row);\n    }\n    console.log(lineages)\n    lineages = Array.from(lineages);\n    window.lineages = lineages\n    const colors = ['red', 'green', 'blue', 'orange', 'pink']\n\nconst CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload) {\n      console.log(label)\n      return (\n        <div className=\"custom-tooltip\">\n          {label}\n          {payload.map((value, index) => {\n            if (value.name != \"_range\") {\n              return (\n                <div style={{ 'color': value.stroke }} className=\"label\">{`${value.name} : ${value.value}`}</div>)\n            }\n          }\n          )}\n\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n\n  if(type==\"area\"){\nreturn(<ComposedChart data={for_lambda} width={500} height={200}>\n    <CartesianGrid stroke=\"#ccc\" />\n\n    {lineages.map((value, index) => {\n      console.log(value)\n      return <Area stackId=\"1\" dot={false} name={value} type=\"monotone\" dataKey={value} fill={colors[index]} />\n    })}\n\n\n    <XAxis dataKey=\"date\" />\n    <YAxis tickFormatter= {value => parseFloat(value).toFixed(2)} domain={[0, 1]} />\n    <ReferenceLine x={date} stroke=\"#aaa\" label=\"\" strokeWidth={1} strokeDasharray=\"3 3\" />\n\n    <Tooltip content={CustomTooltip} />\n  </ComposedChart>)\n}\nelse{\n    return(<ComposedChart data={for_lambda} width={500} height={200}>\n        <CartesianGrid stroke=\"#ccc\" />\n    \n    \n        {lineages.map((value, index) => {\n          console.log(value)\n          return <Area type=\"monotone\" name=\"_range\" dataKey={value + \"_range\"} fill={colors[index]} strokeWidth={0} />\n        })}\n        {lineages.map((value, index) => {\n          console.log(value)\n          return <Line dot={false} name={value} type=\"monotone\" dataKey={value} stroke={colors[index]} />\n        })}\n    \n    \n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <ReferenceLine x={date} stroke=\"#aaa\" label=\"\" strokeWidth={1} strokeDasharray=\"3 3\" />\n    \n        <Tooltip content={CustomTooltip} />\n      </ComposedChart>)\n\n}\n}\n\n\n\nexport default MultiLinePlot;","import React, { useState } from 'react';\n\n\nimport moment from \"moment\";\nimport memoize from 'memoize-one';\nimport MultiLinePlot from \"./MultiLinePlot\";\nimport { Form, Radio, Checkbox } from \"semantic-ui-react\";\n\nfunction get_lad_data(dataframe, lad, lineage) {\n  console.log('calling get')\n  //const lad_data = dataframe.where((item) => item.location === lad ).where((item) => item.parameter === \"lambda\" ).where((item) => item.lineage === lineage ).toArray()\n  const lad_data = dataframe.where((item) => item.location === lad).toArray()\n  return (lad_data)\n}\n\nvar memoized_get_lad_data = memoize(get_lad_data)\n\nfunction LocalIncidence({ dataframe, lad, date, name, lineage }) {\n  console.log(lad)\n  let lad_data = memoized_get_lad_data(dataframe, lad, lineage)\n  window.lad_data = lad_data\n\n  console.log(lad_data)\n\n\n  const [proportion_display_type, setProportionDisplayType] = useState(\"area\");\n\n let handleChange = function(event) {\n    const target = event.target;\n    if(target.checked){\n    setProportionDisplayType(\"area\")\n    }\n    else{\n      setProportionDisplayType(\"line\")\n    }\n  }\n\n  return (<div>\n    <h2>Local incidences</h2>\n    <p className=\"lead\">Local Authority: {name}</p>\n\n\n\n<center>Incidence</center>\n<MultiLinePlot lad_data={lad_data} date={date} parameter=\"lambda\" />\n<hr />\n<center>Proportion <Checkbox style={{\"display\":\"inline-block\"}} checked = {proportion_display_type==\"area\"}  onChange={ handleChange} toggle label=\"Area\" />\n\n</center>\n{proportion_display_type==\"line\" && <MultiLinePlot lad_data={lad_data} date={date} parameter=\"p\" />}\n{proportion_display_type==\"area\" && <MultiLinePlot lad_data={lad_data} date={date} parameter=\"p\" type=\"area\" />}\n\n\n<hr />\n<center>R</center>\n<MultiLinePlot lad_data={lad_data} date={date} parameter=\"R\" />\n\n    {/*lad={lad}\n      date={date}\n      x={lad_data\n        .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\n      y={lad_data\n        .map((item) => item.mean)}\n      upper={lad_data\n        .map((item) => item.upper)}\n      lower={lad_data\n      .map((item) => item.lower)}*/}\n\n\n  </div>\n  );\n}\n\n\nexport default LocalIncidence;\n","import { data } from \"../assets/data_full.json\"\n\n\n\nconst dataForge = require('data-forge');\n\n\n\nfunction loadData() {\n  let new_data = data.map(x => {\n    x.range = [x.lower,x.upper];\n    return(x)\n  } )\n  const dataframe = new dataForge.DataFrame(new_data)//.parseFloats(\"mean\", \"lower\", \"upper\")\n  return (dataframe);\n}\n\n\nexport { loadData }","import React, { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport Chloropleth from \"./Chloropleth\";\nimport LocalIncidence from \"./LocalIncidence\";\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport Slider from \"rc-slider\";\n\n\nimport \"rc-slider/assets/index.css\";\n\nimport { loadTiles, getLALookupTable } from \"../utils/loadTiles\";\nimport { loadData } from \"../utils/loadData\";\nimport { min } from \"moment\";\nimport memoize from 'memoize-one';\nlet LALookupTable = getLALookupTable()\n\nfunction get_min_min_max(dataframe, parameter, value_of_interest, lineage) {\n\n  let dataframe_selected_parameter = dataframe.where(x => x.parameter == parameter)\n  dataframe_selected_parameter = dataframe_selected_parameter.where(x => x.lineage === lineage)\n  const series = dataframe_selected_parameter.where(x => x['mean'] != undefined).getSeries(value_of_interest)\n\n  const min_val = 0 // series.min()\n  const max_val = series.max()\n\n\n  let groups = dataframe_selected_parameter.groupBy(x => x.date);\n  let lookup = {}\n  for (const group of groups) {\n\n    const dater = group.first().date;\n    lookup[dater] = group.setIndex('location')\n\n  }\n  console.log(\"returning\")\n  const unique_dates = dataframe.getSeries('date').distinct().toArray()\n  const unique_lineages = dataframe.getSeries('lineage').distinct().toArray()\n\n  return { 'min_val': min_val, 'max_val': max_val, 'dataframe_selected_parameter': lookup, 'series': series, 'unique_dates': unique_dates,\n'unique_lineages':unique_lineages }\n\n\n}\n\nvar memoized_get_min_max = memoize(get_min_min_max)\nlet dataframe = loadData();\nconst Covid19 = () => {\n\n  \n\n  window.df = dataframe\n\n  ///  [data, indexed_by_date, unique_dates, min_val, max_val] \n  const [parameter, setParameter] = useState(\"lambda\");\n  let unique_parameters = ['lambda','p','R']\n  const parameter_of_interest = parameter\n  const value_of_interest = \"mean\"\n\n  const [lineage, setLineage] = useState(\"total\");\n\n  const { min_val, max_val, series, dataframe_selected_parameter, unique_dates, unique_lineages } = memoized_get_min_max(dataframe, parameter_of_interest, value_of_interest, lineage)\n  window.df2 = dataframe_selected_parameter\n  console.log(min_val, max_val)\n\n\n  const[is_playing,setIsPlaying] = useState(false);\n\n\n  const [tiles, setTiles] = useState([]);\n  const [lad, setLad] = useState({\n    lad: \"E08000006\",\n    data: null,\n    scale: null,\n  });\n  const [date, setDate] = useState({\n    date: \"2020-09-01\",\n\n  });\n\n \n\n\n  const handleOnClick = (e, lad) => {\n    setLad({ ...lad, lad, data: null });\n  };\n\n  const handleDateSlider = (e) => {\n    const set_to = unique_dates[e];\n    //console.log(\"date set to \", set_to)\n    setDate({ date: set_to });\n\n\n  };\n\n\n  const bump_date = (e) => {\n    const cur_index = unique_dates.indexOf(date.date)\n    const set_to = unique_dates[cur_index+1]\n    setDate({ date: set_to });\n\n\n  };\n\n  function togglePlay(){\n    console.log(\"toggle\")\n    if(is_playing){\n    setIsPlaying(false)\n    clearInterval(window.bumpTimeout)\n    }\n    else{\n      setIsPlaying(true)\n      window.bumpTimeout = setInterval(() => this.bump_date(),100);\n    }\n\n  }\n\n  function PlayButton(props) {\n    return('')\n\n    if(!props.is_playing){\n    return (\n    <button onClick={props.onClick}><FaPlay /></button>\n    );\n  }else{\n    return (\n    <button onClick={props.onClick}><FaPause /></button>);\n  }\n  }\n\n\n\n\n\n  useEffect(() => {\n    if (tiles.length === 0) setTiles(loadTiles());\n\n  }, [tiles]);\n\n\n  const lineage_options = unique_lineages.map((x) =><option>{x}</option>)\n\n  if(lineage==\"total\"){\n    unique_parameters = ['lambda','R']\n  }\n  const parameter_options = unique_parameters.map((x) =><option>{x}</option>)\n\n  return (\n    <React.Fragment>\n      {tiles && tiles.length === 0 ? (\n        <div className=\"row\">\n          <Spinner />\n        </div>\n      ) : (\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n            <h2>Select date</h2>\n              <p className=\"lead\"><PlayButton is_playing={is_playing} onClick={togglePlay} />Current date: {date.date}</p>\n\n              <Slider\n                min={0}\n                max={unique_dates && unique_dates.length - 1}\n                onChange={handleDateSlider}\n                value={unique_dates.indexOf(date.date)}\n              />\n              <hr />\n              <h2>Map</h2>\n              <select value={lineage} name=\"lineages\" onChange={e => setLineage(e.target.value)}>\n                {lineage_options}\n              </select>\n              <select value={parameter} name=\"parameters\" onChange={e => setParameter(e.target.value)}>\n                {parameter_options}\n              </select>\n              <Chloropleth\n                lad ={lad.lad}\n                tiles={tiles}\n                max_val={max_val}\n                min_val={min_val}\n                dataframe={dataframe_selected_parameter}\n                date={date.date}\n                scale={date.scale}\n                handleOnClick={handleOnClick}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              \n\n              {<LocalIncidence name={LALookupTable[lad.lad]} date={date.date} lad={lad.lad} dataframe={dataframe} lineage={lineage} />}\n\n            </div>\n          </div>\n        )}\n    </React.Fragment>\n  );\n};\n\nexport default Covid19;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {\n    collapsed: true,\n  };\n  handleToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  render() {\n    const collapsed = this.state.collapsed;\n\n    const classTwo = collapsed\n      ? \"navbar-toggler navbar-toggler-right collapsed\"\n      : \"navbar-toggler navbar-toggler-right\";\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar bg-light transparent-nav\">\n        <div className=\"container\">\n          <NavLink className=\"navbar-brand\" to=\"/\">\n            CovInce\n          </NavLink>\n          <button\n            onClick={this.handleToggle}\n            className={`${classTwo}`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarResponsive\"\n            aria-controls=\"navbarResponsive\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* <div className={`${classOne}`} id=\"navbarResponsive\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/add-user\">\n                  Add User\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/user-list\">\n                  Userlist\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/status\">\n                  Status\n                </NavLink>\n              </li>\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/register\">\n                    Register\n                  </NavLink>\n                </li>\n              )}\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/login\">\n                    Login\n                  </NavLink>\n                </li>\n              )}\n              {this.props.user && (\n                <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/profile\">\n                      {this.props.user.username}\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/logout\">\n                      Logout\n                    </NavLink>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </div> */}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport Covid19 from './Covid19'\nimport Slider from \"rc-slider\";\nfunction ContainerWithTimer() {\n    return (\n      <React.Fragment>\n       <Covid19 />\n      </React.Fragment>\n    );\n  }\n  \n\nexport default ContainerWithTimer","import React from 'react';\nimport Covid19 from \"./components/Covid19\"\nimport NavBar from \"./components/NavBar\"\nimport './App.css';\nimport ContainerWithTimer from './components/ContainerWithTimer';\n\nfunction App() {\n\n  document.getElementById('spinner').style.display = 'none'\n  return (\n    <React.Fragment>\n      <NavBar />\n    <div className=\"container\">\n      \n      <ContainerWithTimer />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<BrowserRouter basename=\"/covid19-web\"><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}