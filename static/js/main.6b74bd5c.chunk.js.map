{"version":3,"sources":["components/Spinner.jsx","utils/loadTiles.js","components/Chloropleth.jsx","components/LineChart2.jsx","components/LocalIncidence.jsx","utils/loadData.js","components/Covid19.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinner","style","display","justifyContent","alignItems","height","className","role","colormap","require","MapUpdater","date","indexed_by_date","dataframe","scale","map","map_loaded","useMap","window","Chloropleth","state","whenReady","setState","console","log","nextProps","nextState","by_loc","getSeries","i","_layers","layer","setStyle","feature","fillColor","item","getRowByIndex","properties","lad19cd","this","props","tiles","handleOnClick","min_val","max_val","lineage","dmin","dmax","colors","nshades","format","alpha","reverse","number","max_log","Math","sqrt","min_log","num_log","round","portion_of_scale_to_use","getColorScale","onEachLad","lad","a","name","lad19nm","code","bindPopup","on","click","e","MapContainer","zoom","center","GeoJSON","weight","color","fillOpacity","data","onEachFeature","eventHandlers","add","items","push","backgroundColor","ceil","createColorBar","React","Component","LineChart2","x","y","upper","lower","upper1","y1","lower1","key","labels","datasets","label","fill","lineTension","borderColor","borderWidth","pointRadius","type","tension","options","animation","duration","title","text","fontSize","maintainAspectRatio","annotation","annotations","drawTime","id","mode","scaleID","value","legend","position","plugins","ChartAnnotation","memoized_get_lad_data","memoize","where","location","parameter","toArray","LocalIncidence","lad_data","df3","df4","moment","mean","dataForge","LALookupTable","lookup_table","features","forEach","getLALookupTable","memoized_get_min_max","value_of_interest","dataframe_selected_parameter","series","undefined","max","groups","groupBy","lookup","group","first","setIndex","distinct","DataFrame","parseFloats","Covid19","df","unique_dates","df2","useState","setTiles","setLad","setDate","useEffect","length","Fragment","min","onChange","set_to","NavBar","collapsed","handleToggle","classTwo","to","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.6b74bd5c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"spinner-border text-secondary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { features } from \"../assets/Local_Authority_Districts__December_2019__Boundaries_UK_BUC.json\" // Can change to BUC to reduce bundle size\nlet colormap = require('colormap')\n\nfunction getColorScale(dmin, dmax) {\n    //dmin=0\n    // dmax = 200\n\n    console.log(\"GCS\")\n\n    let nshades = 4000;\n\n    let colors = colormap({\n        colormap: 'magma',\n        nshades: nshades,\n        format: 'hex',\n        alpha: 1\n    }).reverse()\n\n    let scale = function (number) {\n\n        if (number > dmax) { number = dmax - 1 }\n\n        const max_log = Math.sqrt(dmax)\n        const min_log = Math.sqrt(dmin)\n        const num_log = Math.sqrt(number)\n\n\n\n\n\n        //console.log(\"scale\",)\n        let portion_of_scale_to_use = 0.9; // don't go to deep black\n        return (colors[Math.round(portion_of_scale_to_use * nshades * (num_log - min_log) / (max_log - min_log))])\n\n    }\n    return scale\n}\n\n\n\nfunction loadTiles() {\n    return features\n}\n\n\nfunction getLALookupTable() {\n    let lookup_table = {};\n\n    features.forEach((item) => {\n\n        lookup_table[item.properties.lad19cd] = item.properties.lad19nm\n    })\n    return (lookup_table)\n}\n\n\nexport { loadTiles, getColorScale, getLALookupTable }\n","import React from \"react\";\nimport { MapContainer, GeoJSON, useMap } from \"react-leaflet\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Chloropleth.css\";\nimport { getColorScale } from \"../utils/loadTiles\";\n\n\n\n\nconst MapUpdater = ({ date, indexed_by_date, dataframe, scale, map_loaded }) => {\n\n\n  const map = useMap()\n\n  window.map = map\n  window.scale = scale\n\n  return (false)\n}\n\n\n\nclass Chloropleth extends React.Component {\n\n  state = {\n    map_loaded: false\n  }\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n  const {dataframe,date} =nextProps\n  const by_loc = dataframe[date].getSeries('mean')\n  window.by_loc = by_loc\n  console.log(\"updating\")\n  const map = window.map\n  const scale = window.scale\n  for (var i in map._layers) {\n\n    const layer = map._layers[i]\n    if (layer.setStyle && layer.feature) {\n      let fillColor = null\n      \n        const item = by_loc.getRowByIndex(layer.feature.properties.lad19cd);\n        //console.log(layer.feature.properties.lad19cd,item)\n\n        fillColor = typeof item !== \"undefined\" ? scale(item) : \"#ffffff\";\n      \n      layer.setStyle({ 'fillColor': fillColor })\n    }\n\n\n  }\n\n    // TODO: return false and manually update map for updates\n    return false;\n  }\n\n  whenReady = () => {\n    this.setState({ map_loaded: true });\n    console.log(\"mount\")\n  }\n\n\n  render() {\n    const { tiles, dataframe, indexed_by_date, date, handleOnClick, min_val, max_val, lineage } = this.props;\n\n\n    \n\n    const scale = getColorScale(min_val, max_val)\n\n    const mapStyle = {\n      fillColor: \"white\",\n      weight: 0.5,\n      color: \"#333333\",\n      fillOpacity: 1,\n    };\n\n    const createColorBar = (dmin, dmax, scale) => {\n\n      const items = [];\n      for (let i = 0; i <= 100; i++) {\n        items.push(\n          <span\n            key={`${i}`}\n            className=\"grad-step\"\n            style={{ backgroundColor: scale(dmin + (i / 100) * (dmax - dmin)) }}\n          ></span>\n        );\n      }\n      items.push(\n        <span key=\"domain-min\" className=\"domain-min\">\n          {Math.ceil(dmin)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-med\" className=\"domain-med\">\n          {Math.ceil((dmin + dmax) * 0.5)}\n        </span>\n      );\n      items.push(\n        <span key=\"domain-max\" className=\"domain-max\">\n          {Math.ceil(dmax)}\n        </span>\n      );\n\n      return <div>{items}</div>;\n    };\n\n\n\n    const onEachLad = async (lad, layer) => {\n      console.log('each')\n      const name = lad.properties.lad19nm;\n      const code = lad.properties.lad19cd;\n\n      // layer.options.fillColor =\n      //   typeof item !== \"undefined\" ? await colorScale(data, item) : \"#ffffff\";\n\n      layer.bindPopup(`${name} (${code})`);\n      layer.on({\n        click: (e) => handleOnClick(e, code),\n      });\n    };\n\n    return (\n      <div>\n        <MapContainer style={{ height: \"60vh\" }} zoom={5.5} center={[53.5, -3]}>\n\n          <GeoJSON style={mapStyle} data={tiles} onEachFeature={onEachLad} eventHandlers={{\n            add: this.whenReady\n          }} />\n          <MapUpdater date={date} indexed_by_date={indexed_by_date} dataframe={dataframe} scale={scale} map_loaded={this.state.map_loaded} />\n        </MapContainer>\n        <div className=\"gradient\">\n          <center> {createColorBar(min_val, max_val, scale)}</center>\n        </div>\n      </div>\n    );\n\n  }\n};\n\nexport default Chloropleth;\n","import React from \"react\";\n\n\nimport { Line } from \"react-chartjs-2\";\n\nimport * as ChartAnnotation from 'chartjs-plugin-annotation';\n\n\n\nconst LineChart2 = ({ x, y, upper, lower, y1, upper1, lower1, date,lad }) => {\n\n  const key = date+lad;\n  const state = {\n    labels: x,\n    datasets: [\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: upper,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(236, 236, 236, 1)\",\n        borderColor: \"#rgba(236, 236, 236, 1)\",\n        borderWidth: 0,\n        data: lower,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower1,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgba(236, 236, 236, .4)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n\n      {\n        label: \"Predicted incidence\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgb(235, 122, 52, 1)\",\n        borderColor: \"#ffa500\",\n        borderWidth: 3,\n        data: y,\n        pointRadius: 0,\n      },\n      {\n        // label: \"BandTop\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: upper,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n      {\n        // label: \"BandBottom\",\n        type: \"line\",\n        backgroundColor: \"rgb(235, 122, 52, 0.5)\",\n        borderColor: \"transparent\",\n        pointRadius: 0,\n        fill: 0,\n        tension: 0,\n        data: lower,\n        // yAxisID: \"y\",\n        // xAxisID: \"x\",\n      },\n    ],\n  };\n\n  console.log(date)\n\n  const options = {\n    animation: {\n      duration: 0\n    },\n    title: {\n      display: true,\n      text: \"Daily incidence\",\n      fontSize: 14,\n      maintainAspectRatio: false,\n    },\n    annotation: {\n      annotations: [\n        {\n          drawTime: \"afterDatasetsDraw\",\n          id: \"hline\",\n          type: \"line\",\n          mode: \"vertical\",\n          scaleID: \"x-axis-0\",\n          value: date,\n          borderColor: \"black\",\n          borderWidth: 1,\n          /*label: {\n            backgroundColor: \"gray\",\n            content: date,\n            enabled: true\n          }*/\n        }\n      ]\n    }\n\n\n    ,\n    legend: {\n      display: false,\n      position: \"bottom\",\n    },\n  }\n  console.log(options)\n\n\n\n  return (\n    <Line plugins={[ChartAnnotation]}\n      data={state}\n      options={options}\n      key={key}\n    />\n  );\n};\n\nexport default LineChart2;\n","import React from \"react\";\n\nimport LineChart2 from \"./LineChart2\";\n\nimport moment from \"moment\";\nimport memoize from 'memoize-one';\n\nfunction get_lad_data(dataframe, lad,lineage){\n  console.log('calling get')\n  const lad_data = dataframe.where((item) => item.location === lad ).where((item) => item.parameter === \"lambda\" ).where((item) => item.lineage === lineage ).toArray()\n  return(lad_data)\n}\n\nvar memoized_get_lad_data = memoize(get_lad_data)\n\nfunction LocalIncidence({ dataframe, lad, date, name,lineage }) {\n  console.log(lad)\n  let lad_data = memoized_get_lad_data(dataframe,lad,lineage)\n  console.log(lad_data)\n  window.df3 = dataframe\n  window.df4 = lad_data\n  return (<div>\n    <h2>Local incidences</h2>\n    <p className=\"lead\">Local Authority: {name}</p>\n   \n\n    <LineChart2\n  \n     lad={lad}\n      date={date}\n      x={lad_data\n        .map((item) => moment(item.date).format(\"YYYY-MM-DD\"))}\n      y={lad_data\n        .map((item) => item.mean)}\n      upper={lad_data\n        .map((item) => item.upper)}\n      lower={lad_data\n        .map((item) => item.lower)}\n    />\n\n  </div>\n  );\n}\n\n\nexport default LocalIncidence;\n","import { data } from \"../assets/data_full.json\"\n\nconst dataForge = require('data-forge');\n\n\n\nfunction loadData(){\n\n   const dataframe = new dataForge.DataFrame(data).parseFloats(\"mean\", \"lower\",\"upper\")    \n   return(dataframe);\n  }\n\n\nexport {loadData}","import React, { useState, useEffect } from \"react\";\nimport Spinner from \"./Spinner\";\nimport Chloropleth from \"./Chloropleth\";\nimport LocalIncidence from \"./LocalIncidence\";\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport Slider from \"rc-slider\";\n\n\nimport \"rc-slider/assets/index.css\";\n\nimport { loadTiles, getLALookupTable } from \"../utils/loadTiles\";\nimport { loadData } from \"../utils/loadData\";\nimport { min } from \"moment\";\nimport memoize from 'memoize-one';\nlet LALookupTable = getLALookupTable()\n\nfunction get_min_min_max(dataframe, parameter,value_of_interest,lineage){\n\n  let dataframe_selected_parameter = dataframe.where(x => x.parameter == parameter)\n  dataframe_selected_parameter = dataframe_selected_parameter.where(x => x.lineage === lineage)\n  const series= dataframe_selected_parameter.where(x=> x['mean'] != undefined).getSeries(value_of_interest)\n\n  const min_val = 0 // series.min()\n  const max_val = series.max()\n  \n\n  let groups = dataframe_selected_parameter.groupBy(x=>x.date);\n  let lookup = {}\n  for (const group of groups) {\n    \n    const dater = group.first().date;\n    lookup[dater] = group.setIndex('location')\n\n}\nconsole.log(\"returning\")\nconst unique_dates = dataframe.getSeries('date').distinct().toArray()\n\n  return {'min_val':min_val, 'max_val':max_val, 'dataframe_selected_parameter':lookup,'series':series,'unique_dates':unique_dates}\n\n\n}\n\nvar memoized_get_min_max = memoize(get_min_min_max)\nlet dataframe = loadData();\nconst Covid19 = () => {\n\n  window.df = dataframe\n\n  ///  [data, indexed_by_date, unique_dates, min_val, max_val] \n\n  const parameter_of_interest = \"lambda\"\n  const value_of_interest = \"mean\"\n  const lineage = \"B.1.1.7\"\n\n\n  const {min_val,max_val,series,dataframe_selected_parameter,unique_dates} = memoized_get_min_max(dataframe,parameter_of_interest,value_of_interest,lineage)\n  window.df2 = dataframe_selected_parameter\n  console.log(min_val,max_val)\n\n  \n\n \n\n  const [tiles, setTiles] = useState([]);\n  const [lad, setLad] = useState({\n    lad: \"E08000006\",\n    data: null,\n    scale: null,\n  });\n  const [date, setDate] = useState({\n    date: \"2020-09-01\",\n\n  });\n\n  const handleOnClick = (e, lad) => {\n    setLad({ ...lad, lad, data: null });\n  };\n\n  const handleDateSlider = (e) => {\n    const set_to = unique_dates[e];\n    //console.log(\"date set to \", set_to)\n    setDate({ date: set_to });\n\n\n  };\n\n\n\n  useEffect(() => {\n    if (tiles.length === 0) setTiles(loadTiles());\n\n  }, [tiles]);\n\n  return (\n    <React.Fragment>\n      {tiles && tiles.length === 0 ? (\n        <div className=\"row\">\n          <Spinner />\n        </div>\n      ) : (\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h2>Map</h2>\n              <Chloropleth\n                tiles={tiles}\n                max_val={max_val}\n                min_val={min_val}\n                dataframe={dataframe_selected_parameter}\n                date={date.date}\n                scale={date.scale}\n                handleOnClick={handleOnClick}\n              />\n            </div>\n            <div className=\"col-md-6\">\n              <h2>Select date</h2>\n              <p className=\"lead\"><button><FaPlay /></button>Current date: {date.date}</p>\n\n              <Slider\n                min={0}\n                max={unique_dates && unique_dates.length-1}\n                onChange={handleDateSlider}\n              />\n              <hr />\n\n              {<LocalIncidence name={LALookupTable[lad.lad]} date={date.date} lad={lad.lad} dataframe={dataframe} lineage={lineage} />}\n\n            </div>\n          </div>\n        )}\n    </React.Fragment>\n  );\n};\n\nexport default Covid19;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  state = {\n    collapsed: true,\n  };\n  handleToggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  render() {\n    const collapsed = this.state.collapsed;\n\n    const classTwo = collapsed\n      ? \"navbar-toggler navbar-toggler-right collapsed\"\n      : \"navbar-toggler navbar-toggler-right\";\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar bg-light transparent-nav\">\n        <div className=\"container\">\n          <NavLink className=\"navbar-brand\" to=\"/\">\n            CovInce\n          </NavLink>\n          <button\n            onClick={this.handleToggle}\n            className={`${classTwo}`}\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarResponsive\"\n            aria-controls=\"navbarResponsive\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* <div className={`${classOne}`} id=\"navbarResponsive\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/add-user\">\n                  Add User\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/user-list\">\n                  Userlist\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" to=\"/status\">\n                  Status\n                </NavLink>\n              </li>\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/register\">\n                    Register\n                  </NavLink>\n                </li>\n              )}\n              {!this.props.user && (\n                <li className=\"nav-item\">\n                  <NavLink className=\"nav-link\" to=\"/login\">\n                    Login\n                  </NavLink>\n                </li>\n              )}\n              {this.props.user && (\n                <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/profile\">\n                      {this.props.user.username}\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link\" to=\"/logout\">\n                      Logout\n                    </NavLink>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </div> */}\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport Covid19 from \"./components/Covid19\"\nimport NavBar from \"./components/NavBar\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n    <div className=\"container\">\n      \n      <Covid19 />\n    </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<BrowserRouter basename=\"/covid19-web\"><App /></BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}